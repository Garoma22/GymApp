diff a/src/main/java/com/example/gymApp/service/TrainerService.java b/src/main/java/com/example/gymApp/service/TrainerService.java	(rejected hunks)
@@ -1,7 +1,13 @@
 package com.example.gymApp.service;
 
+import com.example.gymApp.dto.trainee.TraineeDto3fields;
+import com.example.gymApp.dto.trainee.TraineeMapper;
+import com.example.gymApp.dto.trainer.TrainerDto;
+import com.example.gymApp.dto.trainer.TrainerMapper;
+import com.example.gymApp.dto.trainer.TrainerWithTraineeListDto;
 import com.example.gymApp.model.Trainee;
 import com.example.gymApp.model.Trainer;
+import com.example.gymApp.model.Training;
 import com.example.gymApp.model.TrainingType;
 import com.example.gymApp.model.User;
 import com.example.gymApp.repository.TraineeRepository;
@@ -11,16 +17,15 @@
 import com.example.gymApp.repository.UserRepository;
 import java.util.List;
 import java.util.NoSuchElementException;
+import java.util.Optional;
+import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
-
-import java.util.Optional;
 import org.springframework.transaction.annotation.Transactional;
 
-
-
 @Slf4j
+@AllArgsConstructor
 @Service
 public class TrainerService {
 
@@ -30,27 +35,15 @@
   private final TraineeRepository traineeRepository;
   private final TrainingRepository trainingRepository;
 
-
-  @Autowired
-  public TrainerService(TrainerRepository trainerRepository, UserRepository userRepository,
-      TrainingTypeRepository trainingTypeRepository, TraineeRepository traineeRepository,
-      TrainingRepository trainingRepository) {
-    this.trainerRepository = trainerRepository;
-    this.userRepository = userRepository;
-    this.trainingTypeRepository = trainingTypeRepository;
-    this.traineeRepository = traineeRepository;
-    this.trainingRepository = trainingRepository;
-  }
+  private final TraineeService traineeService;
+  private final TraineeMapper traineeMapper;
+  private final TrainerMapper trainerMapper;
 
   public Trainer saveTrainer(Trainer trainer){
     return trainerRepository.save(trainer);
 
   }
 
-
-
-
-
   @Transactional
   public Trainer updateTrainer(Trainer trainer, String name, String lastName, String username,
       String password, Boolean activeStatus, String specialization) {
@@ -147,18 +137,41 @@
     return trainingRepository.findDistinctTrainersByTrainee(trainee);
   }
 
-
   public List<Trainer> getAllActiveTrainersNotAssignedToTrainee(Trainee trainee) {
 
     return trainingRepository.findAllActiveTrainersNotAssignedToTrainee(trainee.getUsername());
-
-
-
   }
 
   public List<Trainer> findByUsernameIn(List<String> newTrainersNames) {
 
     return trainerRepository.findByUsernames(newTrainersNames);
   }
+
+  public TrainerWithTraineeListDto updateTrainerProfile(TrainerDto trainerDto) {
+
+//    Trainer trainer = getTrainerByUsername(trainerDto.getUsername());
+
+    Trainer trainer = trainerRepository.findByUserUsername(trainerDto.getUsername())
+            .orElseThrow(
+                    () -> new NoSuchElementException("No trainer found with the username: " + trainerDto.getUsername()));
+
+    log.info("THIS IS TRAINER FROM DB : " + trainer);
+
+    List<Trainee> trainee = trainer.getTrainings().stream().map(Training::getTrainee).toList();
+
+    log.info("THIS ARE HIS TRAINEES: " + trainees);
+
+    List<TraineeDto3fields> traineeDtosList = traineeMapper.toTraineeDto3ListNew(trainees); //works!
+
+    log.info("THIS are TRAINEE_DTO LIST: " + traineeDtosList);
+
+    trainer.setSpecialization(trainerDto.getSpecialization());
+
+    //updating trainer from DTO
+    trainerRepository.save(trainer);
+    log.info("UPDATED trainer is SAVED :  " + updatedTrainerFromDto);
+
+    return trainerMapper.toDto(trainer, trainee);
+  }
 }
 
