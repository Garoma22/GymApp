package com.example.gymApp.dto.trainee;

import com.example.gymApp.dto.trainer.TrainerDto;
import com.example.gymApp.model.Trainee;
import com.example.gymApp.model.User;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2024-11-19T09:39:29+0400",
    comments = "version: 1.5.5.Final, compiler: javac, environment: Java 22.0.2 (Oracle Corporation)"
)
@Component
public class TraineeMapperImpl implements TraineeMapper {

    @Override
    public Trainee toTrainee(TraineeDto dto) {
        if ( dto == null ) {
            return null;
        }

        Trainee trainee = new Trainee();

        trainee.setUser( traineeDtoToUser( dto ) );
        if ( dto.getDateOfBirth() != null ) {
            trainee.setDateOfBirth( LocalDate.parse( dto.getDateOfBirth() ) );
        }
        trainee.setAddress( dto.getAddress() );

        return trainee;
    }

    @Override
    public List<TraineeDto> toTraineeDtoList(List<Trainee> trainees) {
        if ( trainees == null ) {
            return null;
        }

        List<TraineeDto> list = new ArrayList<TraineeDto>( trainees.size() );
        for ( Trainee trainee : trainees ) {
            list.add( toTraineeDto( trainee ) );
        }

        return list;
    }

    @Override
    public TraineeResponseDto TraineeMapperImplementationMethodAutogeneratedNoUsedInMyCode(Trainee trainee) {
        if ( trainee == null ) {
            return null;
        }

        TraineeResponseDto traineeResponseDto = new TraineeResponseDto();

        traineeResponseDto.setFirstName( traineeUserFirstName( trainee ) );
        traineeResponseDto.setLastName( traineeUserLastName( trainee ) );
        traineeResponseDto.setUsername( traineeUserUsername( trainee ) );

        return traineeResponseDto;
    }

    @Override
    public TraineeTrainingRequestDto toDto(String username, String periodFrom, String periodTo, String trainerName, String specializationName) {
        if ( username == null && periodFrom == null && periodTo == null && trainerName == null && specializationName == null ) {
            return null;
        }

        TraineeTrainingRequestDto traineeTrainingRequestDto = new TraineeTrainingRequestDto();

        traineeTrainingRequestDto.setUsername( username );
        if ( periodFrom != null ) {
            traineeTrainingRequestDto.setPeriodFrom( LocalDate.parse( periodFrom ) );
        }
        if ( periodTo != null ) {
            traineeTrainingRequestDto.setPeriodTo( LocalDate.parse( periodTo ) );
        }
        traineeTrainingRequestDto.setTrainerName( trainerName );
        traineeTrainingRequestDto.setSpecialization( specializationName );

        return traineeTrainingRequestDto;
    }

    @Override
    public TraineeWithTrainerListDto toTraineeWithTrainerListDto(Trainee trainee, List<TrainerDto> trainersList) {
        if ( trainee == null && trainersList == null ) {
            return null;
        }

        String username = null;
        String firstName = null;
        String lastName = null;
        LocalDate dateOfBirth = null;
        String address = null;
        boolean active = false;
        if ( trainee != null ) {
            username = traineeUserUsername( trainee );
            firstName = traineeUserFirstName( trainee );
            lastName = traineeUserLastName( trainee );
            dateOfBirth = trainee.getDateOfBirth();
            address = trainee.getAddress();
            active = traineeUserActive( trainee );
        }
        List<TrainerDto> trainersList1 = null;
        List<TrainerDto> list = trainersList;
        if ( list != null ) {
            trainersList1 = new ArrayList<TrainerDto>( list );
        }

        TraineeWithTrainerListDto traineeWithTrainerListDto = new TraineeWithTrainerListDto( username, firstName, lastName, dateOfBirth, address, active, trainersList1 );

        return traineeWithTrainerListDto;
    }

    protected User traineeDtoToUser(TraineeDto traineeDto) {
        if ( traineeDto == null ) {
            return null;
        }

        User.UserBuilder user = User.builder();

        user.firstName( traineeDto.getFirstName() );
        user.lastName( traineeDto.getLastName() );

        return user.build();
    }

    private String traineeUserFirstName(Trainee trainee) {
        if ( trainee == null ) {
            return null;
        }
        User user = trainee.getUser();
        if ( user == null ) {
            return null;
        }
        String firstName = user.getFirstName();
        if ( firstName == null ) {
            return null;
        }
        return firstName;
    }

    private String traineeUserLastName(Trainee trainee) {
        if ( trainee == null ) {
            return null;
        }
        User user = trainee.getUser();
        if ( user == null ) {
            return null;
        }
        String lastName = user.getLastName();
        if ( lastName == null ) {
            return null;
        }
        return lastName;
    }

    private String traineeUserUsername(Trainee trainee) {
        if ( trainee == null ) {
            return null;
        }
        User user = trainee.getUser();
        if ( user == null ) {
            return null;
        }
        String username = user.getUsername();
        if ( username == null ) {
            return null;
        }
        return username;
    }

    private boolean traineeUserActive(Trainee trainee) {
        if ( trainee == null ) {
            return false;
        }
        User user = trainee.getUser();
        if ( user == null ) {
            return false;
        }
        boolean active = user.isActive();
        return active;
    }
}
